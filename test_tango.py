import pytest

from tango import parse_input, get_column, get_row, check_board, solve_board

RESTRICTIONS = {
    (0,0): {(1,0): 'x', (0,1): 'x'},
    (1,0): {(2,0): '='},
    (2,0): {(2,1): '='},
    (3,1): {(4,1): 'x', (3,2): 'x'},
    (4,1): {(5,1): 'x'},
    (5,1): {(5,2): 'x'},
    (0,3): {(0,4): 'x'},
    (0,4): {(1,4): 'x'},
    (1,4): {(2,4): 'x'},
    (2,3): {(2,4): 'x'},
    (3,4): {(3,5): 'x'},
    (3,5): {(4,5): 'x'},
    (4,5): {(5,5): 'x'},
    (5,4): {(5,5): 'x'}
}


@pytest.mark.parametrize("board_str", [
    # invalid cell 'X'
    [
        '+-+-+-+-+-+-+',
        '| x = | | | |',
        '+x+-+=+-+-+-+',
        '| |X| | x x |',
        '+-+-+-+x+-+x+',
        '|M| |M| | | |',
        '+-+-+-+-+-+-+',
        '| | | |S| |S|',
        '+x+-+x+-+-+-+',
        '| x x | | | |',
        '+-+-+-+x+-+x+',
        '| | | | x x |',
        '+-+-+-+-+-+-+'
    ],
    # invalid vertical restriction '?'
    [
        '+-+-+-+-+-+-+',
        '| x ? | | | |',
        '+x+-+=+-+-+-+',
        '| | | | x x |',
        '+-+-+-+x+-+x+',
        '|M| |M| | | |',
        '+-+-+-+-+-+-+',
        '| | | |S| |S|',
        '+x+-+x+-+-+-+',
        '| x x | | | |',
        '+-+-+-+x+-+x+',
        '| | | | x x |',
        '+-+-+-+-+-+-+'
    ],
    # invalid horizontal border '?'
    [
        '+-+-+-+-+-+-+',
        '| x = | | | |',
        '+x+?+=+-+-+-+',
        '| | | | x x |',
        '+-+-+-+x+-+x+',
        '|M| |M| | | |',
        '+-+-+-+-+-+-+',
        '| | | |S| |S|',
        '+x+-+x+-+-+-+',
        '| x x | | | |',
        '+-+-+-+x+-+x+',
        '| | | | x x |',
        '+-+-+-+-+-+-+'
    ],
])
def test_parse_input_invalid_value(board_str):
    with pytest.raises(ValueError):
        parse_input(board_str)


@pytest.mark.parametrize("board_str", [
    # 5 rows -> invalid
    [
        '+-+-+-+-+-+-+',
        '| x = | | | |',
        '+x+-+=+-+-+-+',
        '| | | | x x |',
        '+-+-+-+x+-+x+',
        '|M| |M| | | |',
        '+-+-+-+-+-+-+',
        '| | | |S| |S|',
        '+x+-+x+-+-+-+',
        '| x x | | | |',
        '+-+-+-+x+-+x+',
    ],
    # 5 cols -> invalid
    [
        '+-+-+-+-+-+',
        '| x = | | |',
        '+x+-+=+-+-+',
        '| | | | x x',
        '+-+-+-+x+-+',
        '|M| |M| | |',
        '+-+-+-+-+-+',
        '| | | |S| |',
        '+x+-+x+-+-+',
        '| x x | | |',
        '+-+-+-+x+-+',
        '| | | | x x',
        '+-+-+-+-+-+'
    ]
])
def test_parse_input_invalid_index(board_str):
    with pytest.raises(IndexError):
        parse_input(board_str)


def test_parse_input_valid():
    lines = [
        '+-+-+-+-+-+-+',
        '| x = | | | |',
        '+x+-+=+-+-+-+',
        '| | | | x x |',
        '+-+-+-+x+-+x+',
        '|M| |M| | | |',
        '+-+-+-+-+-+-+',
        '| | | |S| |S|',
        '+x+-+x+-+-+-+',
        '| x x | | | |',
        '+-+-+-+x+-+x+',
        '| | | | x x |',
        '+-+-+-+-+-+-+'
    ]
    expected_board = [
        [' ', ' ', ' ', ' ', ' ', ' '],
        [' ', ' ', ' ', ' ', ' ', ' '],
        ['M', ' ', 'M', ' ', ' ', ' '],
        [' ', ' ', ' ', 'S', ' ', 'S'],
        [' ', ' ', ' ', ' ', ' ', ' '],
        [' ', ' ', ' ', ' ', ' ', ' ']
    ]

    assert parse_input(lines) == (expected_board, RESTRICTIONS)


@pytest.mark.parametrize("board,column_number,expected", [
    (
            [
                [' ', ' ', ' ', ' ', ' ', ' '],
                [' ', ' ', ' ', ' ', ' ', ' '],
                ['M', ' ', 'M', ' ', ' ', ' '],
                [' ', ' ', ' ', 'S', ' ', 'S'],
                [' ', ' ', ' ', ' ', ' ', ' '],
                [' ', ' ', ' ', ' ', ' ', ' ']
            ],
            2, [' ', ' ', 'M', ' ', ' ', ' ']
    ),
    (
            [
                [' ', ' ', ' ', ' ', ' ', ' '],
                [' ', ' ', ' ', ' ', ' ', ' '],
                ['M', ' ', 'M', ' ', ' ', ' '],
                [' ', ' ', ' ', 'S', ' ', 'S'],
                [' ', ' ', ' ', ' ', ' ', ' '],
                [' ', ' ', ' ', ' ', ' ', ' ']
            ],
            3, [' ', ' ', ' ', 'S', ' ', ' ']
    )
])
def test_get_column(board, column_number, expected):
    assert get_column(board, column_number) == expected


@pytest.mark.parametrize("board,row_number,expected", [
    (
            [
                [' ', ' ', ' ', ' ', ' ', ' '],
                [' ', ' ', ' ', ' ', ' ', ' '],
                ['M', ' ', 'M', ' ', ' ', ' '],
                [' ', ' ', ' ', 'S', ' ', 'S'],
                [' ', ' ', ' ', ' ', ' ', ' '],
                [' ', ' ', ' ', ' ', ' ', ' ']
            ],
            2, ['M', ' ', 'M', ' ', ' ', ' ']
    ),
    (
            [
                [' ', ' ', ' ', ' ', ' ', ' '],
                [' ', ' ', ' ', ' ', ' ', ' '],
                [' ', ' ', ' ', ' ', ' ', ' '],
                [' ', ' ', ' ', 'S', ' ', 'S'],
                [' ', ' ', ' ', ' ', ' ', ' '],
                [' ', ' ', ' ', ' ', ' ', ' ']
            ],
            3, [' ', ' ', ' ', 'S', ' ', 'S']
    )
])
def test_get_row(board, row_number, expected):
    assert get_row(board, row_number) == expected


# @pytest.mark.parametrize("board,column_number,column,expected", [
#     (
#             [
#                 [' ', ' ', ' ', ' ', ' ', ' '],
#                 [' ', ' ', ' ', ' ', ' ', ' '],
#                 ['M', ' ', 'M', ' ', ' ', ' '],
#                 [' ', ' ', ' ', 'S', ' ', 'S'],
#                 [' ', ' ', ' ', ' ', ' ', ' '],
#                 [' ', ' ', ' ', ' ', ' ', ' ']
#             ],
#             2, ['M', 'S', 'M', ' ', ' ', ' '],
#             [
#                 [' ', ' ', 'M', ' ', ' ', ' '],
#                 [' ', ' ', 'S', ' ', ' ', ' '],
#                 ['M', ' ', 'M', ' ', ' ', ' '],
#                 [' ', ' ', ' ', 'S', ' ', 'S'],
#                 [' ', ' ', ' ', ' ', ' ', ' '],
#                 [' ', ' ', ' ', ' ', ' ', ' ']
#             ]
#     ),
#     (
#             [
#                 [' ', ' ', ' ', ' ', ' ', ' '],
#                 [' ', ' ', ' ', ' ', ' ', ' '],
#                 ['M', ' ', 'M', ' ', ' ', ' '],
#                 [' ', ' ', ' ', 'S', ' ', 'S'],
#                 [' ', ' ', ' ', ' ', ' ', ' '],
#                 [' ', ' ', ' ', ' ', ' ', ' ']
#             ],
#             5, ['S', 'S', 'M', 'S', 'M', 'M'],
#             [
#                 [' ', ' ', ' ', ' ', ' ', 'S'],
#                 [' ', ' ', ' ', ' ', ' ', 'S'],
#                 ['M', ' ', 'M', ' ', ' ', 'M'],
#                 [' ', ' ', ' ', 'S', ' ', 'S'],
#                 [' ', ' ', ' ', ' ', ' ', 'M'],
#                 [' ', ' ', ' ', ' ', ' ', 'M']
#             ],
#     )
# ])
# def test_set_column(board, column_number, column, expected):
#     assert set_column(board, column_number, column) == expected


@pytest.mark.parametrize("board,expected", [
    # 3 consecutive M in row -> invalid
    ([
         [' ', ' ', ' ', ' ', ' ', ' '],
         [' ', ' ', ' ', ' ', ' ', ' '],
         ['M', 'M', 'M', ' ', ' ', ' '],
         [' ', ' ', ' ', 'S', ' ', 'S'],
         [' ', ' ', ' ', ' ', ' ', ' '],
         [' ', ' ', ' ', ' ', ' ', ' ']
     ], False),
    # 3 consecutive S in col -> invalid
    ([
         [' ', ' ', ' ', ' ', ' ', ' '],
         [' ', ' ', ' ', 'S', ' ', ' '],
         ['M', ' ', 'M', 'S', ' ', ' '],
         [' ', ' ', ' ', 'S', ' ', 'S'],
         [' ', ' ', ' ', ' ', ' ', ' '],
         [' ', ' ', ' ', ' ', ' ', ' ']
     ], False),
    # 4 S in col -> invalid
    ([
         [' ', ' ', ' ', ' ', ' ', ' '],
         [' ', ' ', ' ', 'S', ' ', ' '],
         ['M', ' ', 'M', 'S', ' ', ' '],
         [' ', ' ', ' ', ' ', ' ', 'S'],
         [' ', ' ', ' ', 'S', ' ', ' '],
         [' ', ' ', ' ', 'S', ' ', ' ']
     ], False),
    # 4 M in col -> invalid
    ([
         [' ', ' ', ' ', ' ', ' ', ' '],
         [' ', ' ', ' ', ' ', ' ', ' '],
         ['M', 'M', ' ', 'M', 'M', ' '],
         [' ', ' ', ' ', 'S', ' ', 'S'],
         [' ', ' ', ' ', ' ', ' ', ' '],
         [' ', ' ', ' ', ' ', ' ', ' ']
     ], False),
    # violate restriction '0,0': {'1,0': 'x'} -> invalid
    ([['M', 'M', ' ', ' ', ' ', ' '],
      [' ', ' ', ' ', ' ', ' ', ' '],
      ['M', ' ', 'M', ' ', ' ', ' '],
      [' ', ' ', ' ', 'S', ' ', 'S'],
      [' ', ' ', ' ', ' ', ' ', ' '],
      [' ', ' ', ' ', ' ', ' ', ' ']
      ], False),
    # violate restriction '1,0': {'2,0': '='} -> invalid
    ([[' ', 'M', 'S', ' ', ' ', ' '],
      [' ', ' ', ' ', ' ', ' ', ' '],
      ['M', ' ', 'M', ' ', ' ', ' '],
      [' ', ' ', ' ', 'S', ' ', 'S'],
      [' ', ' ', ' ', ' ', ' ', ' '],
      [' ', ' ', ' ', ' ', ' ', ' ']
      ], False),
    # valid empty board
    ([[' ', ' ', ' ', ' ', ' ', ' '],
      [' ', ' ', ' ', ' ', ' ', ' '],
      ['M', ' ', 'M', ' ', ' ', ' '],
      [' ', ' ', ' ', 'S', ' ', 'S'],
      [' ', ' ', ' ', ' ', ' ', ' '],
      [' ', ' ', ' ', ' ', ' ', ' ']
      ], True),
    # valid board, test for 3 non consecutive M and S
    ([[' ', ' ', ' ', ' ', ' ', ' '],
      [' ', ' ', ' ', ' ', ' ', ' '],
      ['M', 'S', 'M', 'S', 'M', 'S'],
      [' ', ' ', ' ', 'S', ' ', 'S'],
      [' ', ' ', ' ', ' ', ' ', ' '],
      [' ', ' ', ' ', ' ', ' ', ' ']
      ], True)
])
def test_check_board(board, expected):
    assert check_board(board, RESTRICTIONS) == expected


def test_solve_board():
    board = [
        [' ', ' ', ' ', ' ', ' ', ' '],
        [' ', ' ', ' ', ' ', ' ', ' '],
        ['M', 'S', 'M', 'S', 'M', 'S'],
        [' ', ' ', ' ', 'S', ' ', 'S'],
        [' ', ' ', ' ', ' ', ' ', ' '],
        [' ', ' ', ' ', ' ', ' ', ' ']
    ]

    expected = [
        ['M', 'S', 'S', 'M', 'S', 'M'],
        ['S', 'M', 'S', 'M', 'S', 'M'],
        ['M', 'S', 'M', 'S', 'M', 'S'],
        ['M', 'S', 'M', 'S', 'M', 'S'],
        ['S', 'M', 'S', 'M', 'S', 'M'],
        ['S', 'M', 'M', 'S', 'M', 'S']
    ]

    assert solve_board(board, RESTRICTIONS, 0) == expected
